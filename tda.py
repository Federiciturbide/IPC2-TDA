# -*- coding: utf-8 -*-
"""TDA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KjcW352GOlM5_cKbYm_3a2ZJ9QSIYI4A
"""



"""IPC2-TDA

Ejercicio listas enlazadas
"""

class cliente:
  def __init__(self,nombre,no_habitacion):
    self.nombre = nombre
    self.no_habitacion = no_habitacion

class node:
  def __init__(self,cliente=None, next=None):
    self.cliente = cliente
    self.next = next

class linked_list:
  def __init__(self):
    self.head = None
  
  def insertar(self, cliente):
    if not self.head:
      self.head = node(cliente=cliente)
      return
    current = self.head
    while current.next:
      current = current.next
      current.next = node(cliente=cliente)

  def imprimir(self):
    node = self.head
    while node != None:
      print(node.cliente.nombre,end = "=>")
      node=node.next

  def eliminar(self,no_habitacion):
    current = self.head
    previous = None
    while current and current.cliente.no_habitacion != no_habitacion:
      previous = current
      current = current.next
    if previous is None:
      self.head = current.next
    elif current:
      previous.next = current.next
      current.next = None

c1 = cliente("Estuardo Zapeta",101)
c2 = cliente("Marco Lopez",103)
c3 = cliente("Josue Armas",204)
c4 = cliente("Gladys Olmos",302)

lista = linked_list()
lista.insertar(c1)
lista.insertar(c2)
lista.insertar(c3)
lista.insertar(c4)

lista.imprimir()

lista.eliminar(101)



"""Ejercicio Listas circulares

"""

class linked_list_circular:
  def __init__(self,head=None):
    self.head = head
    self.size = 0

  def insertar (self, cliente):
    if self.size == o:
      self.head = node(cliente=cliente)
      self.head.next = self.head
    else: 
      new_node = node(cliente=cliente, next=self.head.next)
      self.head.next = new_node
    self.size +=1

  def imprimir(self):
    if self.head is None:
      return
    node = self.head
    print(node.cliente.nombre,end=" => ")
    while (node.next != self.head):
      node = node.next
      print(node.cliente.nombre,end=" => ")

  def eliminar(self, no_habitacion):
    node = self.head
    while node is not None:
      if node.cliente.no_habitacion == no_habitacion:
        if node.previous is not None:
          if node.next:
              node.previous.next = node.next
              node.next.previous = node.previous
          else:
            node.previous.next = None
            self.last = node.previous
        else:
          self.head = node.next 
          node.next.previous = self.head
          self.size -= 1
          return True
      else:
        node = node.next
        return False

c1 = cliente("alexis lopez", 100)
c2 = cliente("ana ramirez", 101)
c3 = cliente("Sergi Roberto", 102)

lista_de = linked_list_de()
lista_de.insertar(c1)
lista_de.insertar(c2)
lista_de.insertar(c3)

lista_de.imprimir()

lista_de.eliminar(102)

"""Pilas"""

class Pila:
  def __init__(self):
    self.pila=[]

  def apilar(self,cliente):
    self.pila.append(sliente)
    
  def devolver_tamano(self):
    return len(self.pila)

  def imprimir(self):
    for elemento in self.pila:
      print(elemento.nombre, end= " => ")

  def desapilar(self):
    if self.pila:
      self.pila.pop()

"""Colas

"""

class Cola:
  def __init__(self):
    self.cola=[]

  def encolar(self,cliente):
    self.cola.append(cliente)

  def devolver_tamano(self):
    return len(self.cola)

  def imprimir(self):
    for elemento in self.cola:
      print(elemento.nombre,end=" => ")
      
  def desencolar(self):
    if self.cola:
      self.cola.pop(0)